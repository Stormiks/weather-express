<!DOCTYPE html>
<html lang="ru">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Weather</title>

  <%- include('partials/head-styles') %>
  <%- include('partials/head-scripts') %>
</head>

<body>
  <div class="site-wrapper" id="app">
    <div class="site-wrapper-inner">
      <div class="cover-container">
        <div class="masthead clearfix">
          <div class="inner">
            <h3 class="masthead-brand">Weather</h3>

            <%- include('partials/header-nav-site', { linkActive: 'sensors' }) %>
          </div>
        </div>

        <div class="inner sensor-widget">
          <ul class="nav nav-pills">
            <li v-bind:class="{ active: key === sensorTableActiveId }" role="button"
              v-for="(sensorModel, key) in sensorModels" v-bind:key="'sensorModel' + key">
              <a class="btn btn-default" v-bind:href="'#' + key" v-bind:title="'Датчик ' + sensorModel"
                v-on:click="sensorTableActiveId = key">{{ sensorModel }}</a>
            </li>
            <li>
              <div class="form-group">
                <label class="sr-only" for="sensorModelAdd">Добавить модель:</label>
                <input type="text" class="form-control" id="sensorModelAdd" placeholder="Имя модели"
                  v-if="isVisibleModelAdd" v-model="modalFormData.modelName" v-on:keydown.enter="onSaveSensor"
                  v-on:keydown.ctrl.90="onClearModalForm">
              </div>
            </li>
            <li role="button">
              <a class="btn btn-default" role="button" v-on:click.prevent="onVisibleInputAddModel">
                <span class="glyphicon glyphicon-plus"></span>
              </a>
            </li>
          </ul>
        </div>

        <div class="inner cover">
          <h1 class="cover-heading">Информация о датчике</h1>

          <section class="table-wrapper spinner">
            <div class="spinner-wrapper" v-if="!isLoading">
              <%- include('partials/spinner') %>
            </div>

            <div class="row table-header"></div>
            <div class="table-body" v-if="isLoading && dataRaw.count">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>ID датчика</th>
                    <th>Серийный номер</th>
                    <th>Дата регистрации</th>
                  </tr>
                </thead>
                <tbody>
                  <tr v-for="item in dataRaw.rows" v-bind:key="'device' + item.id">
                    <td>{{ item.deviceId }}</td>
                    <td>{{ item.serialNumber }}</td>
                    <td>{{ parseCreated(item.createdAt) }}</td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div class="row table-footer" v-if="isLoading && dataRaw.count">
              <%- include('partials/table/pagination') %>
            </div>
          </section>
        </div>
      </div>
    </div>
  </div>

  <%- include('partials/body-scripts') %>

  <script src="/assets/js/helpers.js"></script>

  <script>
    const { computed, onBeforeMount, onMounted, reactive, watch, toRefs } = Vue

    function range(min, max, step = 1) {
      let range = [];

      for (let i = min; i <= max; i += step) {
        range.push(i);
      }

      return range;
    }

    new Vue({
      setup() {
        const state = reactive({
          dataRaw: {},
          sensorModelsRaw: {},
          modalFormData: {
            modelName: ''
          },
          sensorTableActiveId: null,
          pageTable: 1,
          currentPerPage: 10,
          isVisibleModelAdd: false,
          isLoading: true,
          sensorModels: computed(() => {
            return state.sensorModelsRaw.rows ? Array.from(state.sensorModelsRaw.rows).reduce((acc, curVal) => {
              acc[curVal.id] = curVal.modelName;

              return acc;
            }, {}) : []
          }),
          lastPage: computed(() => {
            return state.numberOfPages;
          }),
          numberOfPages: computed(() => {
            return Math.max(
              Math.ceil(state.dataRaw.count / state.currentPerPage),
              1
            );
          }),
          isLastPage: computed(() => {
            return state.pageTable === state.numberOfPages;
          }),
          isFirstPage: computed(() => {
            return state.pageTable === 1;
          }),
          previousPage: computed(() => {
            return state.pageTable - 1;
          }),
          nextPage: computed(() => {
            return state.pageTable + 1;
          }),
          pagination: computed(() => {
            const { lastPage, pageTable, nextPage, previousPage } = state;
            if (lastPage === 1) {
              return [1];
            }

            if (lastPage <= 7) {
              return range(1, lastPage);
            }

            if (lastPage > 7 && pageTable <= 4) {
              return [1, 2, 3, 4, 5, "...", lastPage];
            }

            if (lastPage > 8 && lastPage > pageTable + 3) {
              return [
                1,
                "...",
                previousPage,
                pageTable,
                nextPage,
                "...",
                lastPage
              ];
            }

            if (lastPage > 7 && lastPage <= pageTable + 3) {
              return [
                1,
                "...",
                lastPage - 3,
                lastPage - 2,
                lastPage - 1,
                lastPage
              ];
            }
          }),
        });

        watch(() => [state.sensorTableActiveId, state.pageTable],
          ([id, prevId], [page, prevPage]) => {
            fetchDataTable();
          }
        )

        onBeforeMount(() => {
          dayjs.locale($('html').attr('lang'));
          dayjs.extend(window.dayjs_plugin_utc);
          dayjs.extend(window.dayjs_plugin_timezone);
          dayjs.extend(window.dayjs_plugin_localizedFormat);
          dayjs.tz.setDefault('Asia/Krasnoyarsk');
        });

        onMounted(() => {
          fetchSensorModels();
        });

        function onVisibleInputAddModel() {
          state.isVisibleModelAdd = !state.isVisibleModelAdd;
          Vue.nextTick().then(function () {
            document.querySelector('#sensorModelAdd').focus()
          })
        }

        function onSaveSensor() {
          $.post('/api/sensor/model/add', state.modalFormData)
            .done(() => fetchSensorModels());
        }

        function onClearModalForm() {
          state.modalFormData.modelName = ''
          state.isVisibleModelAdd = !state.isVisibleModelAdd;
        }

        function parseCreated(strDate) {
          return dayjs(strDate).tz('Asia/Krasnoyarsk').format('LL LT');
        }

        function toPageTable(page) {
          if (!(page >= 1 && page <= state.numberOfPages)) {
            return;
          }

          state.pageTable = page;
        }

        function fetchDataTable() {
          state.isLoading = false

          const query = {
            page: state.pageTable,
            model: state.sensorTableActiveId,
            limit: state.currentPerPage
          }

          fetch(`/api/sensor/list${stringify(query)}`, { method: 'GET' })
            .then((data) => data.json())
            .then((data) => {
              state.dataRaw = data
              state.isLoading = true
            })
        }

        function fetchSensorModels() {
          fetch(`/api/sensor/model/list`, { method: 'GET' })
            .then((data) => data.json())
            .then((data) => state.sensorModelsRaw = data)
        }

        return {
          ...toRefs(state),
          parseCreated,
          toPageTable,
          fetchDataTable,
          fetchSensorModels,
          onVisibleInputAddModel,
          onSaveSensor,
          onClearModalForm
        };
      }
    }).$mount('#app');
  </script>
</body>

</html>
