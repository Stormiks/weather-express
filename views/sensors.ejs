<!DOCTYPE html>
<html lang="ru">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Weather</title>

  <%- include('partials/head-styles') %>
  <%- include('partials/head-scripts') %>
</head>

<body>
  <div class="site-wrapper" id="app">
    <div class="site-wrapper-inner">
      <div class="cover-container">
        <div class="masthead clearfix">
          <div class="inner">
            <h3 class="masthead-brand">Weather</h3>

            <%- include('partials/header-nav-site', { linkActive: 'sensors' }) %>
          </div>
        </div>

        <div class="inner cover">
          <h1 class="cover-heading">Sensors table</h1>
          <section class="table-wrapper">
            <div class="row table-header">
              <button class="btn btn-primary" type="button">
                <span class="glyphicon glyphicon-plus"></span>
                Добавить датчик
              </button>
            </div>
            <div class="table-body">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Модель</th>
                    <th>ID датчика</th>
                    <th>Серийный номер</th>
                    <th>Дата регистрации</th>
                  </tr>
                </thead>
                <tbody>
                  <tr v-for="item in dataRaw.rows" v-bind:key="item.id">
                    <td>{{ item.model ? item.model : 'Неизвестно' }}</td>
                    <td>{{ item.deviceId }}</td>
                    <td>{{ item.serialNumber }}</td>
                    <td>{{ parseCreated(item.createdAt) }}</td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div class="row table-footer">
              <%- include('partials/table/pagination') %>
            </div>
          </section>
        </div>
      </div>
    </div>
  </div>

  <%- include('partials/body-scripts') %>

  <script src="/assets/js/helpers.js"></script>

  <script>
    const { computed, onBeforeMount, onMounted, reactive, toRefs } = Vue

    function range(min, max, step = 1) {
      let range = [];

      for (let i = min; i <= max; i += step) {
        range.push(i);
      }

      return range;
    }

    new Vue({
      setup() {
        const state = reactive({
          dataRaw: {},
          pageTable: 1,
          currentPerPage: 10,
          lastPage: computed(() => {
            return state.numberOfPages;
          }),
          isLoading: computed(() => {
            return state.numberOfPages > 1
          }),
          numberOfPages: computed(() => {
            return Math.max(
              Math.ceil(state.dataRaw.count / state.currentPerPage),
              1
            );
          }),
          isLastPage: computed(() => {
            return state.pageTable === state.numberOfPages;
          }),
          isFirstPage: computed(() => {
            return state.pageTable === 1;
          }),
          previousPage: computed(() => {
            return state.pageTable - 1;
          }),
          nextPage: computed(() => {
            return state.pageTable + 1;
          }),
          pagination: computed(() => {
            const { lastPage, pageTable, nextPage, previousPage } = state;
            if (lastPage === 1) {
              return [1];
            }

            if (lastPage <= 7) {
              return range(1, lastPage);
            }

            if (lastPage > 7 && pageTable <= 4) {
              return [1, 2, 3, 4, 5, "...", lastPage];
            }

            if (lastPage > 8 && lastPage > pageTable + 3) {
              return [
                1,
                "...",
                previousPage,
                pageTable,
                nextPage,
                "...",
                lastPage
              ];
            }

            if (lastPage > 7 && lastPage <= pageTable + 3) {
              return [
                1,
                "...",
                lastPage - 3,
                lastPage - 2,
                lastPage - 1,
                lastPage
              ];
            }
          }),
        });

        onBeforeMount(() => {
          dayjs.locale($('html').attr('lang'));
          dayjs.extend(window.dayjs_plugin_utc);
          dayjs.extend(window.dayjs_plugin_timezone);
          dayjs.extend(window.dayjs_plugin_localizedFormat);
          dayjs.tz.setDefault('Asia/Krasnoyarsk');
        });

        onMounted(() => {
          fetchDataTable();
        });

        function parseCreated(strDate) {
          return dayjs(strDate).tz('Asia/Krasnoyarsk').format('LL LT');
        }

        function toPageTable(page) {
          if (!(page >= 1 && page <= state.numberOfPages)) {
            return;
          }

          state.pageTable = page;
          fetchDataTable(page);
        }

        function fetchDataTable(queryPage = 1) {
          const query = queryPage ? `?page=${queryPage}` : ''
          fetch(`/api/sensor-list${query}`, { method: 'GET' })
            .then((data) => data.json())
            .then((data) => state.dataRaw = data)
        }

        return {
          ...toRefs(state),
          parseCreated,
          toPageTable,
          fetchDataTable
        };
      }
    }).$mount('#app');
  </script>
</body>

</html>
